from __future__ import print_function
from __future__ import division
#from __future__ import unicode_literals
from scipy.stats import norm
from math import log

class Dist:

	"""
	This class holds various parameterized distributions used to fit empirical data
	generated by background models used by the TieDIE algorithm.
	"""

	def __init__(self, training_data, method):

		self.fit = {}
		if method == "gaussian":
			self.fitNorm(training_data)


	@staticmethod
	def fitLogNorm(vector, test_value):
		"""
			Fit a log-normal to the background distrubtion supplied.
			Get the p-value based on the log of the test value.

			Input:
				vector: background distribution to fit
				test_value: value to test against the fitted background distribution

			Output:
				A p-value based on that distribution
		"""
		EPSILON = 0.00001
		mean, sd = norm.fit([log(v+EPSILON) for v in vector])
		# just the cdf: this value should be smaller
		p_val = norm.cdf(log(test_value+EPSILON), loc=mean,scale=sd)

		return p_val

	def fitNorm(self, vector):
		"""
			Fit a normal to the background distrubtion supplied.

			Input:
				vector: background distribution to fit

		"""
		mean, sd = norm.fit([v for v in vector])
		self.mean = mean
		self.sd = sd

	def getP(self, test_value):

		EPSILON = 0.001
		p_val = norm.cdf(test_value+EPSILON, loc=self.mean,scale=self.sd)

		if p_val > 0.5:
			p_val = 1-p_val

		# 2-tailed p-value
		p_val *= 2

		return p_val

	def getZ(self, test_value):

		EPSILON = 0.001
		z_score = (test_value - self.mean) / self.sd
		return z_score
